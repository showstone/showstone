<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听风的博客</title>
  <subtitle>行走，辨思，记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showstone.net/"/>
  <updated>2018-05-27T13:45:02.000Z</updated>
  <id>http://showstone.net/</id>
  
  <author>
    <name>Shicheng Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令模式推导及应用场景浅析</title>
    <link href="http://showstone.net/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2018/05/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2018-05-24-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%B5%85%E6%9E%90/"/>
    <id>http://showstone.net/设计模式/2018/05/24/设计模式-2018-05-24-命令模式推导及应用场景浅析/</id>
    <published>2018-05-24T05:48:08.000Z</published>
    <updated>2018-05-27T13:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前阵子在做一个东西时，用到了命令模式的变种，当时有些细节记不清了，于是去网上找了一些资料，结果越看越迷糊。最后索性自己重新推导了一次，在对推导过程作记录后，就有了这篇文章。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用word时，如果做错了某步操作，我们可以进行”撤销”,恢复到操作之前的状态。尽管每种操作都不一样，但是却神奇地能用同样的方式“撤销”。这是怎么做到的呢？</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>从上面的描述，我们可以知道，word能做到这些功能:</p>
<ul>
<li>以同样的方式表示所有可以撤销的操作</li>
<li>记录所有可以撤销的操作</li>
</ul>
<p>由此，可以得到以下结构:<br><img src="media/command_pattern_class1.png" alt="command_pattern_class1"></p>
<p>仔细看看，好像有个问题: 命令的定义应该是通用的，如输入一段文字，但是我们撤消的是在某个地方输入的一段文字，所以还要加上命令执行的上下文，这里我们用Receiver来指代。更新后的类图:<br><img src="media/command_pattern_class2.png" alt="command_pattern_class2"></p>
<h2 id="模式的理解"><a href="#模式的理解" class="headerlink" title="模式的理解"></a>模式的理解</h2><p>要理解命令模式，除了从它的应用场景推导之外，也可以从它的定义帮助理解:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">命令一般应用于政府机构中。当某政府首脑发出命令时，一般不会由该首脑直接面对执行的人，而是通过类似国务院等机构发出。这里的国务院等机构就是命令模式里的Invoker，负责记录和执行。</div><div class="line"></div><div class="line">命令里，一般会说清楚，要谁来做什么，所以，事实上命令(这里的命令不同于上面类图里的command)是由receiver和command两部分组成。</div><div class="line"></div><div class="line">每过一段时间，都有人事上的一些变动，为第一次人事变动，都创建一种命令模板是不可能的，于是，政府对于主要的命令都规则了一个模板，每次需要的时间，只要把对应的人和职位变动内容填上去就可以了，这就是我们的command。</div></pre></td></tr></table></figure></p>
<h2 id="命令模式的类图"><a href="#命令模式的类图" class="headerlink" title="命令模式的类图"></a>命令模式的类图</h2><p>这部分网上的资料很多，我就不重复写了，以下内容摘自<a href="https://blog.csdn.net/zhengzhb/article/details/7550895" target="_blank" rel="external">博客</a><br><img src="media/command_pattern_diagram.png" alt="command_pattern_diagra"></p>
<h2 id="适合场景与优缺点"><a href="#适合场景与优缺点" class="headerlink" title="适合场景与优缺点"></a>适合场景与优缺点</h2><p>命令模式有以下优点:</p>
<ol>
<li>命令和实际的执行者分离，实际的操作都是通过invoker以及receiver去执行的</li>
<li>屏蔽了底层的复杂实现，对外提供了统一的表现</li>
<li>可以记录操作的历史记录</li>
<li>拓展性好，一方面，可以很方便地添加新的命令，如在word中添加插入html功能；另一方面，也可以把命令迁移到另一种场景下，如把word中的命令迁移到excel中</li>
<li>用户使用上，用户通过组合一些命令，可以实现宏的功能，效率更高</li>
</ol>
<p>缺点:</p>
<ul>
<li>代码冗余较多。每个命令，需要同时修改好几个地方，维护较复杂</li>
</ul>
<p>由其优缺点，可以得出其适用场景:</p>
<ul>
<li>编辑软件，如word,excel中，但是由于撤销依赖于当前状态，所以如果应用的状态无法完整保存，那么不应该提供撤销功能</li>
<li>由第一点，可以用于workflow、oa系统等软件中，用于定义流程、功能节点</li>
<li>由第三点，可以用于需要审计的系统中，用于审计</li>
<li>shell中，用于对资源进行封装</li>
<li>第五点在很多文本编辑器中都有体现</li>
</ul>
<p>不适用的场景:</p>
<ul>
<li>功能足够简单。如果功能本身比较简单，则不建议引入命令模式，它会带来更多的复杂性，以及更高的开发成本</li>
<li>命令的意义不清晰或经常变化。命令模式在解耦命令的发出者与执行者的同时，也让命令发出者与执行者的联系不那么清晰，如果修改了命令的意义，要全面修改命令的调用者，会比较难</li>
</ul>
]]></content>
    
    <summary type="html">
    
      命令模式
    
    </summary>
    
      <category term="设计模式" scheme="http://showstone.net/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://showstone.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="命令模式" scheme="http://showstone.net/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Keyboard Maestro介绍</title>
    <link href="http://showstone.net/%E5%B7%A5%E5%85%B7/2018/05/19/software-2018-05-19-Keyboard-Maestro%E4%BB%8B%E7%BB%8D/"/>
    <id>http://showstone.net/工具/2018/05/19/software-2018-05-19-Keyboard-Maestro介绍/</id>
    <published>2018-05-19T11:38:15.000Z</published>
    <updated>2018-05-22T15:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前就听说了Mac上的神器 Keyboard Maestro，据说可以极大提高工作的效率，趁着今天周末试了一下，发现果然牛逼，可以有效提高效率。以下是记录:</p>
<h2 id="Keyboard-Maestro的作用"><a href="#Keyboard-Maestro的作用" class="headerlink" title="Keyboard Maestro的作用"></a>Keyboard Maestro的作用</h2><p>根据官网的介绍:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Keyboard Maestro Is The Leading Software For Macos Automation.</div></pre></td></tr></table></figure></p>
<p>和Mac上有一个自带的Automator比较类似，但是在易用性与功能的强大上比Automator强大很多。</p>
<p>我主要用它来做:</p>
<ul>
<li>批量打开常用的程序，如邮件、微信、开发工具等</li>
<li>简化经常重复的操作，如清除剪贴板里内容的格式、格式化json字符串等</li>
<li>自动化根据条件做的一些事情，如果连上家里的wiki，则自动打开时光机进行同步</li>
</ul>
<h2 id="Keyboard-maestro的功能"><a href="#Keyboard-maestro的功能" class="headerlink" title="Keyboard maestro的功能"></a>Keyboard maestro的功能</h2><p>它主要的工作流程是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">触发-&gt;做一些事情</div></pre></td></tr></table></figure>
<p>触发可以是快捷键或者输入的某个事件，然后开始做一系列的事情。它的触发器类型和可以做的事情非常多，具体可以看附的介绍资料以及官方文档。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://sspai.com/post/36442#fn2" target="_blank" rel="external">Keyboard Maestro 入门指南 - 少数派</a><br><a href="https://sspai.com/post/39495" target="_blank" rel="external">我如何用 Keyboard Maestro 替代 TextExpander - 少数派</a><br><a href="https://www.keyboardmaestro.com/" target="_blank" rel="external">Keyboard Maestro 官网</a></p>
]]></content>
    
    <summary type="html">
    
      自动化你的工作
    
    </summary>
    
      <category term="工具" scheme="http://showstone.net/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Keyboard Maestro" scheme="http://showstone.net/tags/keyboard-maestro/"/>
    
      <category term="automator" scheme="http://showstone.net/tags/automator/"/>
    
  </entry>
  
  <entry>
    <title>python 依赖管理简介</title>
    <link href="http://showstone.net/uncategorized/2018/03/20/python-2018-03-20-python-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E7%AE%80%E4%BB%8B/"/>
    <id>http://showstone.net/uncategorized/2018/03/20/python-2018-03-20-python-依赖管理简介/</id>
    <published>2018-03-20T08:18:05.000Z</published>
    <updated>2018-03-20T08:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 虽然好用，但是项目一多，依赖的管理就是个大问题了，新项目已经全在用 python3，而老项目都是 pthon2，更蛋疼的是，不同项目之间还可能依赖了同一个库的不同版本！我们试着解决这个问题:</p>
<h2 id="pip-解决项目的全局依赖问题"><a href="#pip-解决项目的全局依赖问题" class="headerlink" title="pip: 解决项目的全局依赖问题"></a>pip: 解决项目的全局依赖问题</h2><p>最开始的时候，我们都是手动安装库，而库可能还有依赖的库，这样最终会形成一张树的依赖结构。解决这个问题，我们可以使用 pip。</p>
<p>它主要解决包的问题，包括安装、更新、删除等。<br>简介: <a href="https://pip.pypa.io/en/stable/quickstart/" target="_blank" rel="external">https://pip.pypa.io/en/stable/quickstart/</a><br>安装: <a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="external">https://pip.pypa.io/en/stable/installing/</a></p>
<h2 id="virtualenv-解决不同项目间使用同一依赖不同版本的问题"><a href="#virtualenv-解决不同项目间使用同一依赖不同版本的问题" class="headerlink" title="virtualenv: 解决不同项目间使用同一依赖不同版本的问题"></a>virtualenv: 解决不同项目间使用同一依赖不同版本的问题</h2><p>pip 可以帮助我们方便地安装项目需要的依赖，不过随着项目的变多，我们可能会在不同的项目里使用同一个库的不同版本，甚至python 的不同版本，这时，需要一个新的工具来解决这个问题: virtualenv。</p>
<p>它可以帮助我们创建一个虚拟、独立的依赖环境，以保证每个项目可以使用指定的依赖，包括 python、第三方库等。</p>
<h2 id="conda-解决非python依赖的问题，以及简单统一的操作方式"><a href="#conda-解决非python依赖的问题，以及简单统一的操作方式" class="headerlink" title="conda: 解决非python依赖的问题，以及简单统一的操作方式"></a>conda: 解决非python依赖的问题，以及简单统一的操作方式</h2><p>pip 和 virtualenv的组合，可以解决绝大部分 python的依赖管理问题，但是，随着项目的发展，我们可能需要非 python 的依赖，来解决现有问题。</p>
<p>conda 作为一个打包工具和安装程序，可以帮助我们解决主流的开发环境和依赖的问题，除 python 外，它还支持：R, Ruby, Lua, Scala, Java, JavaScript, C/C++, FORTRAN等语言。一定程度上，可以把它看着 pip 和 virtualenv 的结合（实际上，pip 和 conda 是互补的关系，因为 pip 可以安装一部分 conda 不能安装的依赖）。</p>
<p><a href="https://www.anaconda.com/what-is-anaconda/" target="_blank" rel="external">官网</a> (很卡，不推荐，建议使用下面的镜像)<br><a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="external">国内镜像</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>virtualenv和conda都是通过修改 shell 里的环境变量来达到修改环境的目的，基本原理类似。<br>不同的项目可以用不同的工具，不要求全，适合才是最好的。<br>Pycharm 对以上工具都有很好的支持，善用工具可以极大提高效率。  </p>
<p>以下是参考资料:<br><a href="https://zhuanlan.zhihu.com/p/32925500" target="_blank" rel="external">Anaconda介绍、安装及使用教程</a><br><a href="http://python.jobbole.com/85588/" target="_blank" rel="external">Anacodna之conda与 virtualenv对比使用教程，创建虚拟环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 虽然好用，但是项目一多，依赖的管理就是个大问题了，新项目已经全在用 python3，而老项目都是 pthon2，更蛋疼的是，不同项目之间还可能依赖了同一个库的不同版本！我们试着解决这个问题:&lt;/p&gt;
&lt;h2 id=&quot;pip-解决项目的全局依赖问题&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="python" scheme="http://showstone.net/tags/python/"/>
    
      <category term="依赖管理" scheme="http://showstone.net/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    
      <category term="conda" scheme="http://showstone.net/tags/conda/"/>
    
      <category term="virtualenv" scheme="http://showstone.net/tags/virtualenv/"/>
    
      <category term="conda virtualenv 区别" scheme="http://showstone.net/tags/conda-virtualenv-%E5%8C%BA%E5%88%AB/"/>
    
      <category term="conda virtualenv 比较" scheme="http://showstone.net/tags/conda-virtualenv-%E6%AF%94%E8%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>java8里lambda里的 this 为什么会指向 lamdba 所在的外部类</title>
    <link href="http://showstone.net/java/2018/02/13/java-2018-02-13-java8%E9%87%8Clambda%E9%87%8C%E7%9A%84-this-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%8C%87%E5%90%91-lamdba-%E6%89%80%E5%9C%A8%E7%9A%84%E5%A4%96%E9%83%A8%E7%B1%BB/"/>
    <id>http://showstone.net/java/2018/02/13/java-2018-02-13-java8里lambda里的-this-为什么会指向-lamdba-所在的外部类/</id>
    <published>2018-02-13T04:34:59.000Z</published>
    <updated>2018-02-13T05:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天复习了 lambda ，发现有个细节，十分难以理解，那就是 lambda 里的 this指针。</p>
<p>Lambda 里的this指针指向其所属的内部类， 是怎么实现的呢？</p>
<p>写了一个例子，作为测试:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.function.Supplier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> LambdaTest().test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        String para = <span class="string">"abc"</span>;</div><div class="line">        String para2 = <span class="string">"abc"</span>;</div><div class="line">        System.out.println(<span class="keyword">this</span>);</div><div class="line">        Supplier&lt;String&gt; supplier = () -&gt; &#123;</div><div class="line">            <span class="keyword">return</span> para + para2;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(supplier.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的jvm 机器码是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private static java.lang.String lambda$test$0(java.lang.String, java.lang.String);</div><div class="line">  descriptor: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</div><div class="line">  flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC</div><div class="line">  Code:</div><div class="line">    stack=2, locals=2, args_size=2</div><div class="line">       0: new           #12                 // class java/lang/StringBuilder</div><div class="line">       3: dup</div><div class="line">       4: invokespecial #13                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">       7: aload_0</div><div class="line">       8: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      11: aload_1</div><div class="line">      12: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      15: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      18: areturn</div><div class="line">    LineNumberTable:</div><div class="line">      line 16: 0</div></pre></td></tr></table></figure></p>
<p>通过方法签名可以知道，如果一个类没有带 this,被编译成了一个静态内部类方法。</p>
<p>带 this：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.function.Supplier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> LambdaTest().test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        String para = <span class="string">"abc"</span>;</div><div class="line">        String para2 = <span class="string">"abc"</span>;</div><div class="line">        System.out.println(<span class="keyword">this</span>);</div><div class="line">        Supplier&lt;String&gt; supplier = () -&gt; &#123;</div><div class="line">            System.out.println(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> para + para2;</div><div class="line">        &#125;;</div><div class="line">        System.out.println(supplier.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的 jvm 机器码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private java.lang.String lambda$test$0(java.lang.String, java.lang.String);</div><div class="line">  descriptor: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</div><div class="line">  flags: ACC_PRIVATE, ACC_SYNTHETIC</div><div class="line">  Code:</div><div class="line">    stack=2, locals=3, args_size=3</div><div class="line">       0: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">       3: aload_0</div><div class="line">       4: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</div><div class="line">       7: new           #12                 // class java/lang/StringBuilder</div><div class="line">      10: dup</div><div class="line">      11: invokespecial #13                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</div><div class="line">      14: aload_1</div><div class="line">      15: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      18: aload_2</div><div class="line">      19: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">      22: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class="line">      25: areturn</div><div class="line">    LineNumberTable:</div><div class="line">      line 15: 0</div><div class="line">      line 16: 7</div></pre></td></tr></table></figure></p>
<p>lambda 被编译成了一种内部类！这就能说通了。</p>
<p>结论:</p>
<blockquote>
<p>lambda一般情况下会被编译成静态匿名方法，引用的外部变量以参数的方式传递。<br>如果 lambda 里使用了this 指标，则被编译为匿名内部方法，以让 this 指针指向lambda 外部类。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天复习了 lambda ，发现有个细节，十分难以理解，那就是 lambda 里的 this指针。&lt;/p&gt;
&lt;p&gt;Lambda 里的this指针指向其所属的内部类， 是怎么实现的呢？&lt;/p&gt;
&lt;p&gt;写了一个例子，作为测试:&lt;/p&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="JAVA" scheme="http://showstone.net/categories/java/"/>
    
    
      <category term="java8" scheme="http://showstone.net/tags/java8/"/>
    
      <category term="lambda" scheme="http://showstone.net/tags/lambda/"/>
    
      <category term="this" scheme="http://showstone.net/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>Nas服务器的外网访问配置</title>
    <link href="http://showstone.net/uncategorized/2017/12/11/%E5%B7%A5%E5%85%B7-2017-12-11/"/>
    <id>http://showstone.net/uncategorized/2017/12/11/工具-2017-12-11/</id>
    <published>2017-12-10T18:11:45.000Z</published>
    <updated>2017-12-28T14:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用花生壳的DDNS实现了Nas服务的外网访问，可以在公司访问家里的timeMachine.瞬间觉得自己的数据安全了很多。<br>可惜好景不长。没多久就发现家里的文件没有通过samba访问。于是开始折腾Nas系统，发现官方推荐上https，同时为了统一访问体验，决定上子域名。以下是折腾的记录。</p>
<h2 id="子域名的两种方案"><a href="#子域名的两种方案" class="headerlink" title="子域名的两种方案"></a>子域名的两种方案</h2><p>查找资料后发现，要实现子域名的DDNS,有两种方案:</p>
<ol>
<li>购买花生壳的付费二级域名，然后在二级域名的基础上使用三级域名。优点是简单、方便、便宜。可以不用备案。</li>
<li>自己购买顶级的域名，然后通过脚本更新DNS记录。优点是掌控度高。</li>
</ol>
<h2 id="买花生壳的付费二级域名"><a href="#买花生壳的付费二级域名" class="headerlink" title="买花生壳的付费二级域名"></a>买花生壳的付费二级域名</h2><p>比较过两种方案后，我决定还是买花生壳的付费二级域名。反正是给自己用的，输入域名的机会不多，长几个短几个字母问题不大。</p>
<p>首先购买</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前使用花生壳的DDNS实现了Nas服务的外网访问，可以在公司访问家里的timeMachine.瞬间觉得自己的数据安全了很多。&lt;br&gt;可惜好景不长。没多久就发现家里的文件没有通过samba访问。于是开始折腾Nas系统，发现官方推荐上https，同时为了统一访问体验，决定上子
    
    </summary>
    
    
      <category term="nas" scheme="http://showstone.net/tags/nas/"/>
    
      <category term="外网" scheme="http://showstone.net/tags/%E5%A4%96%E7%BD%91/"/>
    
      <category term="多个子域名" scheme="http://showstone.net/tags/%E5%A4%9A%E4%B8%AA%E5%AD%90%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>如何快速找到想要的信息</title>
    <link href="http://showstone.net/uncategorized/2017/10/31/%E4%BF%A1%E6%81%AF%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%A1%8C%E5%8A%A8%E6%8C%87%E5%8D%97-2017-10-31-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>http://showstone.net/uncategorized/2017/10/31/信息化时代的个人行动指南-2017-10-31-如何快速找到想要的信息/</id>
    <published>2017-10-31T05:05:21.000Z</published>
    <updated>2017-10-31T05:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在一个信息爆炸的时代，互联网给我们带来丰富信息的同时，也造成了很大的负担，如何在网上快速准确的找到想要的信息，是一个很重要的技巧。</p>
<p>常见的信息来源有：</p>
<ul>
<li>搜索引擎等通用搜索</li>
<li>stack over flow等专业领域知识</li>
<li>知乎、搜狗（用于查询微信公众号的内容）等封闭社区</li>
</ul>
<p>下面两类，主要在于平时的积累，这里重点说说搜索引擎：</p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>搜索引擎处于互联网的中心，连接了各种信息。使用时，可以从一个点出发，然后不断缩小范围，最终找到想要的信息。</p>
<p>以查询“天龙八部”的出处背景为例：<br>直接输入“天龙八部”会是这样：<br><img src="http://7xqf9w.com1.z0.glb.clouddn.com/15094236205724.jpg" alt=""></p>
<p>如果知道“天龙八部”与佛教相关，可以输入“天龙八部 佛教”：<br><img src="http://7xqf9w.com1.z0.glb.clouddn.com/15094237342672.jpg" alt=""></p>
<p>如果不知道与佛教相关，则可以先了解它的背景：<br><img src="http://7xqf9w.com1.z0.glb.clouddn.com/15094240222029.jpg" alt=""></p>
<h3 id="常见的拓展信息"><a href="#常见的拓展信息" class="headerlink" title="常见的拓展信息"></a>常见的拓展信息</h3><ul>
<li>本身的描述，如apple可能是水果，也可能是科技公司</li>
<li>背景信息，如历史时间段、行业等</li>
<li>相关信息，如一个人的学校、籍贯等</li>
</ul>
<h3 id="搜索引擎的功能"><a href="#搜索引擎的功能" class="headerlink" title="搜索引擎的功能"></a>搜索引擎的功能</h3><p>google支持以下功能的搜索：<br><img src="http://7xqf9w.com1.z0.glb.clouddn.com/15093574576046.jpg" alt=""></p>
<ul>
<li>查询多个关键词，以空格分开</li>
<li>查询短语，用英文的引号（“”）分开</li>
<li>查询任意一个词,用 OR 分开</li>
<li>排除某个词，用  - 分开</li>
<li>数字范围，用 .. 表示</li>
</ul>
<p>同时，还可以对搜索的结果做一些限制：</p>
<ul>
<li>时间范围</li>
<li>特定网站</li>
<li>在页面的特定位置，如title、页眉、正文等，甚至是url、链接</li>
<li>资源的类型，如pdf、ppt、word等</li>
</ul>
<p>其他技巧：</p>
<ul>
<li>通配符  “*”</li>
<li>搜索缓存<br>在相应网址前加上“cache:”</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在一个信息爆炸的时代，互联网给我们带来丰富信息的同时，也造成了很大的负担，如何在网上快速准确的找到想要的信息，是一个很重要的技巧。&lt;/p&gt;
&lt;p&gt;常见的信息来源有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索引擎等通用搜索&lt;/li&gt;
&lt;li&gt;stack over flow等专业领域
    
    </summary>
    
    
      <category term="搜索引擎" scheme="http://showstone.net/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="查询信息" scheme="http://showstone.net/tags/%E6%9F%A5%E8%AF%A2%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下打印服务器的安装配置与使用教程</title>
    <link href="http://showstone.net/uncategorized/2017/10/29/%E5%B7%A5%E5%85%B7-2017-10-29-ubuntu%E4%B8%8B%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://showstone.net/uncategorized/2017/10/29/工具-2017-10-29-ubuntu下打印服务器的安装配置与使用教程/</id>
    <published>2017-10-28T17:51:42.000Z</published>
    <updated>2017-10-28T17:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了假装学习，在某宝上剁了一台HP打印机，用了一阵子后发现个，每次打印都要开台式机（USB打印机连在台式机上），很麻烦，如果能把打印机连在NAS服务器上，就好多了。事不宜迟，马上开搞，以下是搞机的记录：</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>一台nas服务器</li>
<li>一台hp打印机</li>
</ul>
<h2 id="在nas上安装打印机驱动"><a href="#在nas上安装打印机驱动" class="headerlink" title="在nas上安装打印机驱动"></a>在nas上安装打印机驱动</h2><p>ubuntu上打印机的驱动安装，与具体的型号和品牌有关，hp的是通过hplip工具来实现。具体安装很简单，一路确认就可以。不确定的简单搜索就可以了，以下是参考：</p>
<p>hplip地址： <a href="https://developers.hp.com/hp-linux-imaging-and-printing/gethplip" target="_blank" rel="external">https://developers.hp.com/hp-linux-imaging-and-printing/gethplip</a></p>
<p>安装详细过程: <a href="http://blog.csdn.net/ws_20100/article/details/49120509" target="_blank" rel="external">http://blog.csdn.net/ws_20100/article/details/49120509</a></p>
<p>安装好后本地打印一张纸试试，看看是否正常。</p>
<h2 id="配置打印服务器"><a href="#配置打印服务器" class="headerlink" title="配置打印服务器"></a>配置打印服务器</h2><p>ubnntu下的打印服务器可以通过cups来实现。<br>具体的安装和配置：</p>
<ol>
<li><p>安装cups</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cups cups-client</div></pre></td></tr></table></figure>
</li>
<li><p>备份cups配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/cups/cupsd.conf /etc/cups/cupsd.conf.bak</div></pre></td></tr></table></figure>
</li>
<li><p>用以下内容代替/etc/cups/cupsd.conf：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"># /etc/cups/cupsd.conf</div><div class="line"># Simple CUPS configuration file for a print server</div><div class="line"># which serves printers within a private local area network.</div><div class="line"># - There is no need for additional security within the print server, ie only authorises people can access the machine.</div><div class="line"></div><div class="line"># This setup also allows access to the CUPS &quot;Administrative tasks&quot; system</div><div class="line"># via your web browser to http://localhost:631</div><div class="line"># File based on Ubuntu 5.10 (Breezy Badger) (Linux version 2.6.12-10-386)</div><div class="line"># Server Directives are explained in http://localhost:631/sam.html</div><div class="line"></div><div class="line"># 25/04/2006</div><div class="line"># DavidTangye@netscape.net</div><div class="line"></div><div class="line">ConfigFilePerm 0600</div><div class="line">LogLevel info</div><div class="line">Printcap /var/run/cups/printcap</div><div class="line">RunAsUser Yes</div><div class="line">Port 631</div><div class="line">Include cupsd-browsing.conf</div><div class="line">BrowseAddress @LOCAL</div><div class="line">BrowseAddress 10.0.0.0/8</div><div class="line">BrowseAddress 172.16.0.0/12</div><div class="line">BrowseAddress 192.168.0.0/16</div><div class="line"></div><div class="line">&lt;Location /&gt;</div><div class="line">AuthType None</div><div class="line">Order Deny,Allow</div><div class="line">Deny From All</div><div class="line">Allow From @LOCAL</div><div class="line">Allow From 10.0.0.0/8</div><div class="line">Allow From 172.16.0.0/12</div><div class="line">Allow From 192.168.0.0/16</div><div class="line">&lt;/Location&gt;</div><div class="line"></div><div class="line">&lt;Location /jobs&gt;</div><div class="line">AuthType None</div><div class="line">Order Deny,Allow</div><div class="line">Deny From All</div><div class="line">Allow From @LOCAL</div><div class="line">Allow From 10.0.0.0/8</div><div class="line">Allow From 172.16.0.0/12</div><div class="line">Allow From 192.168.0.0/16</div><div class="line">&lt;/Location&gt;</div><div class="line"></div><div class="line">&lt;Location /printers&gt;</div><div class="line">AuthType None</div><div class="line">Order Deny,Allow</div><div class="line">Deny From All</div><div class="line">Allow From @LOCAL</div><div class="line">Allow From 10.0.0.0/8</div><div class="line">Allow From 172.16.0.0/12</div><div class="line">Allow From 192.168.0.0/16</div><div class="line">&lt;/Location&gt;</div><div class="line"></div><div class="line">&lt;Location /admin&gt;</div><div class="line">AuthType None</div><div class="line">Order Deny,Allow</div><div class="line">Deny From All</div><div class="line">Allow From @LOCAL</div><div class="line">Allow From 10.0.0.0/8</div><div class="line">Allow From 172.16.0.0/12</div><div class="line">Allow From 192.168.0.0/16</div><div class="line">&lt;/Location&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启cups</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service cups restart</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="http://wiki.ubuntu.org.cn/%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%89%93%E5%8D%B0" target="_blank" rel="external">如何在Ubuntu上使用网络打印-ubuntu-wiki</a><br><a href="https://wiki.archlinux.org/index.php/CUPS_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">CUPS-wiki (简体中文)</a>#mw-head)<br><a href="https://www.howtoing.com/how-to-set-up-a-webgui-based-print-server-on-ubuntu-server-using-swat-cups-and-samba/" target="_blank" rel="external">如何在Ubuntu服务器上设置Web配置的打印服务器使用SWAT，CUPS和SAMBA</a></p>
<h2 id="配置windows客户端"><a href="#配置windows客户端" class="headerlink" title="配置windows客户端"></a>配置windows客户端</h2><p>在<a href="http://localhost:631/admin页面中找到Server" target="_blank" rel="external">http://localhost:631/admin页面中找到Server</a> Settings，选择”Share printers connected to this system”及其子项”Allow printing from the Internet”，点击”Change Setting”按钮保存设置。<br>进入<a href="http://localhost:631/printers/页面点击自己打印机的名字，复制跳转到的页面的URL，即打印机的地址。然后，就可以在Windows上添加使用Ubuntu共享的打印机了。" target="_blank" rel="external">http://localhost:631/printers/页面点击自己打印机的名字，复制跳转到的页面的URL，即打印机的地址。然后，就可以在Windows上添加使用Ubuntu共享的打印机了。</a><br>（来自 <a href="http://www.qingpingshan.com/pc/fwq/324056.html）" target="_blank" rel="external">http://www.qingpingshan.com/pc/fwq/324056.html）</a></p>
<p><em>配置教程</em><br><a href="https://jingyan.baidu.com/article/0f5fb099c50f7a6d8234ea42.html" target="_blank" rel="external">win7</a><br><a href="https://jingyan.baidu.com/article/19020a0a2de41a529c284246.html" target="_blank" rel="external">win10</a><br><a href="https://jingyan.baidu.com/article/a3f121e4f48609fc9052bb01.html" target="_blank" rel="external">mac</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了假装学习，在某宝上剁了一台HP打印机，用了一阵子后发现个，每次打印都要开台式机（USB打印机连在台式机上），很麻烦，如果能把打印机连在NAS服务器上，就好多了。事不宜迟，马上开搞，以下是搞机的记录：&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class
    
    </summary>
    
    
      <category term="ubuntu, 打印服务器, cups" scheme="http://showstone.net/tags/ubuntu-%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-cups/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://showstone.net/uncategorized/2017/10/03/%E5%B7%A5%E5%85%B7-2017-10-03-nas%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA-%E8%BD%AF%E4%BB%B6%E7%AF%87/"/>
    <id>http://showstone.net/uncategorized/2017/10/03/工具-2017-10-03-nas服务器的搭建-软件篇/</id>
    <published>2017-10-02T18:38:09.000Z</published>
    <updated>2018-04-17T03:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>顺利装好机器，是时候试试它的威力了，开始折腾软件.</p>
<p>最近试了一种方案，即用 windows作为主机，用 docker 跑以下的诸多应用，在完美使用 Linux 上的各种工具的同时，还可以使用 windows 下丰富的应用，方便切换.</p>
<hr>
<p><strong>所有功能都建议使用 docker，方便在系统崩溃后重装</strong></p>
<h2 id="NAS软件功能"><a href="#NAS软件功能" class="headerlink" title="NAS软件功能"></a>NAS软件功能</h2><ul>
<li>外网访问。这么牛逼的东东，光在家用怎么行，必须要能在公网访问啊</li>
<li>文件共享。如samba或者ftp</li>
<li>下载。要支持远程下载，http下载有aria2,bt/pt下载有transmission</li>
<li>DLNA服务。可以在线看视频啦~</li>
<li>iTunes媒体共享</li>
<li>time machine等备份服务</li>
<li>和百度云盘等公有云同步</li>
<li>类似于Onedrive(强烈建议不要用百度云，很容易丢文件)等云盘的私有云服务</li>
</ul>
<h2 id="外网访问配置"><a href="#外网访问配置" class="headerlink" title="外网访问配置"></a>外网访问配置</h2><p>根据是否有公网ip，可以采用不同的方案。<br>我用的是电信光纤，是有公网ip的，这个具体和运营商有关，可以打客服电话，说要装监控，需要外网访问，看他怎么说。</p>
<h3 id="有公网Ip"><a href="#有公网Ip" class="headerlink" title="有公网Ip"></a>有公网Ip</h3><p>这种方案需要做端口映射。<br>首先找电信改成桥接模式，或者让电信给一个能做端口映射的光猫。<br>然后在路由器上设置端口映射或DMZ。<br>现在已经可以在公网上访问本机了，但是每次拨号ip都会变，最好能有一个域名，能通过这个域名知道现在的ip–这个就是DDNS服务了，大部分人用的都是花生壳的。具体方式请自行google</p>
<h3 id="没有公网ip"><a href="#没有公网ip" class="headerlink" title="没有公网ip"></a>没有公网ip</h3><p>可以使用内网穿透。网上评价很差，不建议使用。具体使用方式请自行google</p>
<h2 id="NAS软件方案"><a href="#NAS软件方案" class="headerlink" title="NAS软件方案"></a>NAS软件方案</h2><p>NAS服务器的软件，有几种方案:</p>
<ul>
<li>方案一：NAS裸机安装Windows，可在虚拟机中安装Linux，群晖，软路由。推荐。Windows对硬件兼容性好，驱动普遍支持，能无需配置充分发挥显卡性能，平时可做上网机，观影机，HTPC高清电视。</li>
<li>方案二：NAS裸机安装Linux，可在虚拟机中安装Windows，群晖，软路由。技术宅推荐。Windows还是有些缺陷的，系统及某些流氓软件会莫名其妙唤醒全部硬盘。只要能驱动，Linux多媒体不是问题。没有迅雷下载有点问题，移植的也麻烦，可以在Win虚拟机里面迅雷。</li>
<li>方案三：NAS裸机安装群晖，可在虚拟机中安装Windows，Linux，软路由。不推荐。NAS的显卡都浪费了。NAS中集成的功能当然做得很用户友好，非常方便。但是没有的功能很多需要自己编译源码，没有Linux发行版的软件仓库方便，很鸡肋。</li>
</ul>
<p>注1：以上群晖都可以换成其他NAS操作系统。<br>注2：不推荐裸机安装NAS操作系统。</p>
<p>以上内容来自：<a href="https://www.zhihu.com/question/21359049" target="_blank" rel="external">搭建家庭 NAS 服务器有什么好方案？</a></p>
<h2 id="NAS裸机安装Linux方案"><a href="#NAS裸机安装Linux方案" class="headerlink" title="NAS裸机安装Linux方案"></a>NAS裸机安装Linux方案</h2><p>选择NAS裸机安准Linux是因为我要跑脚本，用Linux会方便很多。同时，网上说的驱动问题我没有碰到，用最新版本的系统应该可以解决这个问题，毕竟Linux对Intel的支持还是很好的。我用的是Ubuntu 17.04.</p>
<p>对现有主流的NAS操作系统做了一个调研,发现NAS操作系统太重了，除openmeidavault外，都需要组Raid,对我而言没有必要。</p>
<ul>
<li><a href="http://www.how2shout.com/tools/best-free-open-source-nas-software.html" target="_blank" rel="external">http://www.how2shout.com/tools/best-free-open-source-nas-software.html</a></li>
<li><a href="http://storageroot.com/articles/nas4free-freenas-amahi-openmediavault" target="_blank" rel="external">http://storageroot.com/articles/nas4free-freenas-amahi-openmediavault</a></li>
</ul>
<p>其中，freenas和nas4free，都使用了ZFS文件系统，而ZFS文件系统依赖ECC内存，同时要求8G以上内存。<br>考虑以上原因，决定不上NAS操作系统。</p>
<h3 id="类似于百度云等云盘的私有云服务"><a href="#类似于百度云等云盘的私有云服务" class="headerlink" title="类似于百度云等云盘的私有云服务"></a>类似于百度云等云盘的私有云服务</h3><p><strong>现在80/443端口都被封，出于安全考虑，不建议使用私有云。文件同步可能使用微软的 onedrive，速度快，更安全。</strong></p>
<p>主流的方案有 owncloud和seafile。评测:<br><a href="https://www.zhihu.com/question/46318905" target="_blank" rel="external">https://www.zhihu.com/question/46318905</a></p>
<p>试用之后发现 seafile挺好用的,有以下优点：</p>
<ul>
<li>文件以其实际格式存储，很安全，如果系统崩溃了也不怕</li>
<li>基础功能稳定，速度挺快的</li>
<li>有各种实用的工具，如果文件服务器上已经有大量文件了，可以直接导入到系统中，不需要重新上传</li>
<li>扩展插件多，可以发挥想象力来做出各种功能</li>
</ul>
<h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><ul>
<li>ftp/sftp文件协议。使用不方便，pass</li>
<li>SMB协议。操作方便，速度很快，推荐使用。但是由于电信封了 SMB 协议的端口，所以可能内网访问。</li>
<li>各种私有云方案如 Seafile 和 NextCloud。比较下来，两种系统比较相似，但最终还是选择了 NextCloud，因为 NextCloud 是把你上传的文件原样保存的，这样一是方便容灾，如果系统崩溃了，至少文件还在；二是可以导入本地文件，不用存多个备份。像我原来就有很多文件的情况下，就非常方便了，尤其是同时使用多种文件服务的时候。</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>留坑待填~~</p>
<h3 id="DLNA服务"><a href="#DLNA服务" class="headerlink" title="DLNA服务"></a>DLNA服务</h3><p>留坑待填~~</p>
<h3 id="iTunes媒体共享"><a href="#iTunes媒体共享" class="headerlink" title="iTunes媒体共享"></a>iTunes媒体共享</h3><p>查下来，基本都是用 Vine 来模拟 windows，考虑到稳定性，没有意思。</p>
<h3 id="time-machine等备份服务"><a href="#time-machine等备份服务" class="headerlink" title="time machine等备份服务"></a>time machine等备份服务</h3><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><ul>
<li>Netatalk。它是AFP协议的开源实现</li>
<li>Avahi。它是Apple’s Zeroconf 协议的开源实现<br>安装使用方式请自行百度。<br><strong><em>　注意文件的权限，建议可以先设成777，等没问题后再恢复　 </em></strong></li>
</ul>
<h3 id="和Onedrive等公有云同步"><a href="#和Onedrive等公有云同步" class="headerlink" title="和Onedrive等公有云同步"></a>和Onedrive等公有云同步</h3><p>电信封了 SMB、http、https 的端口，导致要在公网直接访问家里的文件，只能走修改端口后的 http 协议，比较不安全。而且受限于网速，访问速度十分不理想。</p>
<p>一种解决方案是把文件同步到公有文件服务上，如 Onedrive(强烈建议不要用百度云盘，一是容易被封号，导致文件丢失，而且限速很严重）,我的30M 宽带下载能打满，一般家用是够了。</p>
<p>有人开发了 Linux 下Onedrive的客户端，使用十分方案，具体请访问 <a href="https://github.com/skilion/onedrive" target="_blank" rel="external">skilion/onedrive</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顺利装好机器，是时候试试它的威力了，开始折腾软件.&lt;/p&gt;
&lt;p&gt;最近试了一种方案，即用 windows作为主机，用 docker 跑以下的诸多应用，在完美使用 Linux 上的各种工具的同时，还可以使用 windows 下丰富的应用，方便切换.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NAS服务器的搭建--硬件篇</title>
    <link href="http://showstone.net/uncategorized/2017/10/03/%E5%B7%A5%E5%85%B7-2017-10-03-nas%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA-%E7%A1%AC%E4%BB%B6%E7%AF%87/"/>
    <id>http://showstone.net/uncategorized/2017/10/03/工具-2017-10-03-nas服务器的搭建-硬件篇/</id>
    <published>2017-10-02T18:37:59.000Z</published>
    <updated>2017-10-02T18:48:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>现在主流的硬件服务器方案，有以下几种方案：</p>
<ul>
<li>使用群辉等现成的NAS解决方案<br>  优点是简单易上手，对技术的要求较低，有较多的资料和文档可以参考，而且插件较多，可以满足大部分的文件需求。缺点是贵，性价比很低，同时机器的性能很差，没有什么拓展能力。适合普通日常办公使用</li>
<li>使用HP gen8等商用服务器<br>  优点是硬件比较稳定，但是它的价格也比较贵，而且拓展能力不强。在朋友那看过后，发现gen8还有一个很严重的问题：风扇声音太大了！！！</li>
<li>自己组装机器<br>  其实网上已经有比较多的资料，找几篇来看看就可以了</li>
</ul>
<p>群晖的机器对我而言太贵了，HP gen8勉强够用，但是考虑到他的拓展性，还是选择自己组装一台机器。</p>
<h2 id="NAS服务器的要点"><a href="#NAS服务器的要点" class="headerlink" title="NAS服务器的要点"></a>NAS服务器的要点</h2><p>NAS服务器不同于一般的机器，它有以下特点:</p>
<ul>
<li>7*24小时开机，要稳定</li>
<li>盘位较多，最好是6盘位以上,一块系统盘，两块主数据盘，加一块工作盘，同时考虑到以后的拓展，预留两个盘位</li>
<li>安静</li>
<li>功耗低</li>
</ul>
<p>综合以上的特点，参考以上特点，选择自己想要的配置即可。</p>
<h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><p>关于硬件的选择，别人已经说得很详细了，我就不在啰嗦，有兴趣的可以参考：</p>
<ul>
<li><a href="https://www.zhihu.com/question/21359049" target="_blank" rel="external">搭建家庭 NAS 服务器有什么好方案？</a></li>
</ul>
<p>我的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cpu: intel j3455，备选的有n3160, 都是连主板一起的，399元</div><div class="line">内存: 金士顿 ddr3 1600 4g，150元</div><div class="line">机箱: 酷冷至尊特警365，165包邮</div><div class="line">电源: 鑫谷核动力-巡洋舰c5 300w 109元</div><div class="line">共823元</div></pre></td></tr></table></figure>
<p><em>关于硬盘</em><br>硬盘需要单独拿出来说，一般建议买一块固态硬盘作为系统盘，大部分时间是没有数据操作的，这时机械硬盘可以休眠，单独使用固态硬盘即可。</p>
<p>数据盘，也就是机械硬盘，在买的时候需要注意一点：<br><strong>不要买同一品牌、同一批次的硬盘</strong>，因为在同样的环境下，同一品牌同一批次的硬盘，可能会同时坏！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h2&gt;&lt;p&gt;现在主流的硬件服务器方案，有以下几种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用群辉等现成的NAS解决方案&lt;br&gt;  优点是简单易上手，对技术的要
    
    </summary>
    
    
      <category term="NAS服务器" scheme="http://showstone.net/tags/nas%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>NAS服务器的搭建-介绍</title>
    <link href="http://showstone.net/uncategorized/2017/10/03/%E5%B7%A5%E5%85%B7-2017-10-03-nas%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://showstone.net/uncategorized/2017/10/03/工具-2017-10-03-nas服务器的搭建-介绍/</id>
    <published>2017-10-02T18:37:45.000Z</published>
    <updated>2017-10-02T18:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近为了安装 huginn，在aws和 aliyun 上都尝试部署了，发现性能过差，服务很不稳定，就有了自己搭一台服务器的想法，恰好金华老师向我安利了一把 nas 服务器，在调研后，发现正好能满足我的要求。于是开始折腾，这个系统是对这次折腾的记录。</p>
<h2 id="用NAS服务器来做什么"><a href="#用NAS服务器来做什么" class="headerlink" title="用NAS服务器来做什么"></a>用NAS服务器来做什么</h2><p>NAS服务器能做的事情很多，比如：</p>
<p><em>文件服务</em></p>
<ul>
<li>私有文件云，类似于百度云盘，但是不用担心文件会忽然被和谐</li>
<li>文件共享服务，可以把所有的文件存放在同一个地方，并在不同的设备之间共享</li>
<li>文件备份服务，如mac的time machine,可以在连接wifi时自动开始同步</li>
<li>灵活的文件备份策略，可以定期把文件压缩加密后存到其他公有云盘</li>
<li>其他的服务，如远程下载功能，在公司启动下载服务后，自动在家开始下载</li>
</ul>
<p><em>其他服务</em></p>
<ul>
<li>在线工具服务</li>
<li>脚本和爬虫服务</li>
<li>私有git服务等其他服务</li>
<li>开发工具服务器，如mysql、监控等服务</li>
</ul>
<p>再开始选择之前，想清楚自己的需求，是作为一个简单的文件服务器，还是希望有更多的灵活性。</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>huginn，一个IFTTT工具，利用它可以做很多很酷的事情，比如在几个网站监控某件商品，当有比较优惠的活动时，会自动发送通知，再如像葡萄PT只在特定的时间开放注册。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近为了安装 huginn，在aws和 aliyun 上都尝试部署了，发现性能过差，服务很不稳定，就有了自己搭一台服务器的想法，恰好金华老师向我安利了一把 nas 服务器，在调研后，发现正好能满足我的要求。于是开始折腾，这个系统是对这次折腾的记录。&lt;/p&gt;
&lt;h2 id=&quot;
    
    </summary>
    
    
      <category term="NAS服务器" scheme="http://showstone.net/tags/nas%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>下载超大的excel</title>
    <link href="http://showstone.net/%E5%B0%8F%E5%8A%9F%E8%83%BD/2017/08/22/%E5%B0%8F%E5%8A%9F%E8%83%BD-2017-08-22-%E4%B8%8B%E8%BD%BD%E8%B6%85%E5%A4%A7%E7%9A%84excel/"/>
    <id>http://showstone.net/小功能/2017/08/22/小功能-2017-08-22-下载超大的excel/</id>
    <published>2017-08-22T10:42:31.000Z</published>
    <updated>2017-12-10T18:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过 POI的SXSSFWorkbook，使用操作系统的临时文件来作为缓存，可以生成超大的excel 文件（我自己测试到500W,就没往下测了）。</p>
<p>记得使用压缩。关键代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SXSSFWorkbook wb = null;</div><div class="line">try &#123;</div><div class="line">	wb = new SXSSFWorkbook();</div><div class="line">	wb.setCompressTempFiles(true); //压缩临时文件，很重要，否则磁盘很快就会被写满</div><div class="line">	...</div><div class="line">&#125; finally &#123;</div><div class="line">	if (wb != null) &#123;</div><div class="line">		wb.dispose();// 删除临时文件，很重要，否则磁盘可能会被写满</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于业务需要，最近要做一个导出超大数据的功能。之间已经有人做过一版，由于受到POI 导出超大数据量时会出错的影响，它把一个大文件拆成很多个小文件，然后再压缩下载，结果经常出现少一两个文件的问题。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>支持单个 excel 的 sheet 导出100w 的数据</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="导出-csv-文件"><a href="#导出-csv-文件" class="headerlink" title="导出 csv 文件"></a>导出 csv 文件</h3><p>首先想到的是导出 csv 文件，最方便。但是调研后，也是最快放弃的，因为它存在两个很严重的问题：</p>
<ul>
<li>不同系统上的编码不一样，需要人工选择，对于普通用户不做好</li>
<li>没有优化和数据压缩，数据量越大，csv 文件的大小比 excel 更大，当数据导出超过10w 时，csv 文件大小是 excel 的1.5倍</li>
</ul>
<table>
<thead>
<tr>
<th>导出格式</th>
<th>1w</th>
<th>10w</th>
<th>30w</th>
<th>50w</th>
<th>70w</th>
<th>90w</th>
<th>100w</th>
</tr>
</thead>
<tbody>
<tr>
<td>csv</td>
<td>4.0K/120ms</td>
<td>50M/1261ms</td>
<td>160M/3828ms</td>
<td>271M/7415ms</td>
<td>381M/8929ms</td>
<td>491M/11356ms</td>
<td>546M/13688ms</td>
</tr>
</tbody>
</table>
<p><strong>每行30个字段,每个字段里的内容由 Math.random()产生</strong></p>
<h3 id="导出-excel-文件"><a href="#导出-excel-文件" class="headerlink" title="导出 excel 文件"></a>导出 excel 文件</h3><p>大数据量的情况下，csv 的表现较差。只能考虑 excel. 对 excel 作了一个简单的测试</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>1w</th>
<th>2w</th>
<th>3w</th>
<th>4w</th>
<th>5w</th>
<th>6w</th>
<th>7w</th>
<th>8w</th>
<th>10w</th>
</tr>
</thead>
<tbody>
<tr>
<td>耗时</td>
<td>3326ms</td>
<td>6483ms</td>
<td>7894 ms</td>
<td>9899 ms</td>
<td>12873 ms</td>
<td>15198 ms</td>
<td>17362 ms</td>
<td>20106 ms</td>
<td>25494 ms</td>
</tr>
<tr>
<td>导出文件大小</td>
<td>3.7M</td>
<td>7.4MM</td>
<td>12M</td>
<td>15M</td>
<td>19M</td>
<td>23M</td>
<td>26M</td>
<td>30M</td>
<td>37M</td>
</tr>
<tr>
<td>cpu 使用率</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>200%</td>
<td>200%</td>
<td>800%</td>
<td>900%</td>
</tr>
</tbody>
</table>
<p><strong>cpu 使用率均指稳定时的 cpu 使用率</strong></p>
<p>发现几个很严重的问题：</p>
<ul>
<li>随着数据量的增大，cpu使用率直线上升，这会给系统带来很大的风险</li>
<li>当数据量超过10w 时，会出现 OOM 异常</li>
</ul>
<p>excel 在内存里存储地越来越大，研究到了瓶颈。要解决这个问题，有两种方案：</p>
<ul>
<li>先生成多个小 execel 文件，最后合并成一个大文件。查了文档，发现Java 里的工具都是先读出来，再写到 Workbook 对象里, 这样还是会碰到同样的问题。如果用 excel 的工具，则运维成本过大，因此这个方案行不通</li>
<li>参考操作系统里的虚拟内存，用这个来突破 机器的内存限制。但是磁盘的性能很差，这样做的效率很低。</li>
</ul>
<p>这时，在 POI 的文档里发现了SXSSFWorkbook，其支持使用临时文件，可以用来生成超大 Excel 文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Since 3.8-beta3, POI provides a low-memory footprint SXSSF API built on top of XSSF.</div><div class="line"></div><div class="line">SXSSF is an API-compatible streaming extension of XSSF to be used when very large</div><div class="line"> spreadsheets have to be produced, and heap space is limited. SXSSF achieves its</div><div class="line"> low memory footprint by limiting access to the rows that are within a sliding window,</div><div class="line"> while XSSF gives access to all rows in the document. Older rows that are no longer</div><div class="line"> in the window become inaccessible, as they are written to the disk.</div><div class="line"></div><div class="line">In auto-flush mode the size of the access window can be specified, to hold a certain</div><div class="line">number of rows in memory. When that value is reached, the creation of an additional</div><div class="line">row causes the row with the lowest index to to be removed from the access window and</div><div class="line">written to disk. Or, the window size can be set to grow dynamically; it can be trimmed</div><div class="line">periodically by an explicit call to flushRows(int keepRows) as needed.</div><div class="line"></div><div class="line">Due to the streaming nature of the implementation, there are the following</div><div class="line">limitations when compared to XSSF:</div><div class="line"> * Only a limited number of rows are accessible at a point in time.</div><div class="line"> * Sheet.clone() is not supported.</div><div class="line"> * Formula evaluation is not supported</div></pre></td></tr></table></figure>
<p>以下是 SXSSFWorkbook的测试结果：</p>
<p>使用缓存文件导出 excel</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>10w</th>
<th>20w</th>
<th>30w</th>
<th>50w</th>
<th>80w</th>
<th>100w</th>
<th>150w</th>
<th>200w</th>
<th>300w</th>
</tr>
</thead>
<tbody>
<tr>
<td>导出文件大小</td>
<td>37M</td>
<td>74M</td>
<td>111M</td>
<td>184M</td>
<td>295M</td>
<td>368M</td>
<td>552M</td>
<td>736M</td>
<td>1.1G</td>
</tr>
<tr>
<td>耗时（ms）</td>
<td>16259</td>
<td>29516</td>
<td>45846</td>
<td>75503</td>
<td>120434</td>
<td>156484</td>
<td>233730</td>
<td>303510</td>
<td>463399</td>
</tr>
<tr>
<td>cpu 使用率</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>内存使用(k)</td>
<td>149460</td>
<td>176576</td>
<td>141940</td>
<td>143700</td>
<td>168460</td>
<td>180168</td>
<td>169632</td>
<td>198320</td>
<td>187484</td>
</tr>
<tr>
<td>缓存文件大小</td>
<td>37M</td>
<td>74M</td>
<td>111M</td>
<td>185M</td>
<td>295M</td>
<td>369M</td>
<td>553M</td>
<td>737M</td>
<td>1.1G</td>
</tr>
</tbody>
</table>
<p> 可以看到，其在性能与资源耗用上都比较平均，至此，问题完美解决。</p>
<p><strong>SXSSFWorkbook在使用上有一些注意项</strong></p>
<ul>
<li>Note that SXSSF allocates temporary files that you must always clean up explicitly, by calling the dispose method.</li>
<li>​</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SXSSF flushes sheet data in temporary files (a temp file per sheet) and the size</div><div class="line">of these temporary files can grow to a very large value. For example, for a 20 MB</div><div class="line">csv data the size of the temp xml becomes more than a gigabyte. If the size of the</div><div class="line"> temp files is an issue, you can tell SXSSF to use gzip compression:</div><div class="line"></div><div class="line">  SXSSFWorkbook wb = new SXSSFWorkbook();</div><div class="line">  wb.setCompressTempFiles(true); // temp files will be gzipped</div></pre></td></tr></table></figure>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="生成-csv"><a href="#生成-csv" class="headerlink" title="生成 csv"></a>生成 csv</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">private static void prcoessCSV(int rowsNum) throws Exception &#123;</div><div class="line">    try &#123;</div><div class="line">        long startTime = System.currentTimeMillis();</div><div class="line">        final int NUM_OF_ROWS = rowsNum;</div><div class="line">        final int NUM_OF_COLUMNS = 30;</div><div class="line"></div><div class="line"></div><div class="line">        File file = new File(&quot;ooxml-scatter-chart_&quot; + rowsNum + &quot;.csv&quot;);</div><div class="line">        BufferedWriter bf = new BufferedWriter(new FileWriter(file));</div><div class="line">        StringBuffer sb = new StringBuffer();</div><div class="line">        try &#123;</div><div class="line">            for (int rownum = 0; rownum &lt; NUM_OF_ROWS; rownum++) &#123;</div><div class="line">                for (int cellnum = 0; cellnum &lt; NUM_OF_COLUMNS; cellnum++) &#123;</div><div class="line">                    sb.append(Math.random());</div><div class="line">                    if ((cellnum + 1) != NUM_OF_COLUMNS) &#123;</div><div class="line">                        sb.append(&quot;,&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                sb.append(&quot;\n&quot;);</div><div class="line">                if (rownum % 10000 == 0) &#123;</div><div class="line">                    bf.write(sb.toString());</div><div class="line">                    sb = new StringBuffer();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            bf.close();</div><div class="line">        &#125; catch (Exception ex) &#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        long endTime = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;process &quot; + rowsNum + &quot; spent time:&quot; + (endTime - startTime));</div><div class="line"></div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        throw e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="excel，不使用缓存"><a href="#excel，不使用缓存" class="headerlink" title="excel，不使用缓存"></a>excel，不使用缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">     long startTime = System.currentTimeMillis();</div><div class="line">     final int NUM_OF_ROWS = rowsNum;</div><div class="line">     final int NUM_OF_COLUMNS = 30;</div><div class="line"></div><div class="line"></div><div class="line">     Workbook wb = new XSSFWorkbook();</div><div class="line">     Sheet sheet = wb.createSheet(&quot;Sheet 1&quot;);</div><div class="line">     // Create a row and put some cells in it. Rows are 0 based.</div><div class="line">     Row row;</div><div class="line">     Cell cell;</div><div class="line">     for (int rowIndex = 0; rowIndex &lt; NUM_OF_ROWS; rowIndex++) &#123;</div><div class="line">         row = sheet.createRow(rowIndex);</div><div class="line">         for (int colIndex = 0; colIndex &lt; NUM_OF_COLUMNS; colIndex++) &#123;</div><div class="line">             cell = row.createCell(colIndex);</div><div class="line">             cell.setCellValue(Math.random());</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     // Write the output to a file</div><div class="line">     FileOutputStream out = new FileOutputStream(&quot;ooxml-scatter-chart_XSSF_&quot; + rowsNum + &quot;.xlsx&quot;);</div><div class="line">     wb.write(out);</div><div class="line">     out.close();</div><div class="line">     wb.close();</div><div class="line"></div><div class="line">     long endTime = System.currentTimeMillis();</div><div class="line">     System.out.println(&quot;process &quot; + rowsNum + &quot; spent time:&quot; + (endTime - startTime));</div><div class="line"></div><div class="line"> &#125; catch (Exception e) &#123;</div><div class="line">     e.printStackTrace();</div><div class="line">     throw e;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="excel-使用缓存"><a href="#excel-使用缓存" class="headerlink" title="excel,使用缓存"></a>excel,使用缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">     long startTime = System.currentTimeMillis();</div><div class="line">     final int NUM_OF_ROWS = rowsNum;</div><div class="line">     final int NUM_OF_COLUMNS = 30;</div><div class="line"></div><div class="line">     SXSSFWorkbook wb = null;</div><div class="line">     try &#123;</div><div class="line">         wb = new SXSSFWorkbook();</div><div class="line">         wb.setCompressTempFiles(true); //压缩临时文件，很重要，否则磁盘很快就会被写满</div><div class="line">         Sheet sh = wb.createSheet();</div><div class="line">         int rowNum = 0;</div><div class="line">         for (int num = 0; num &lt; NUM_OF_ROWS; num++) &#123;</div><div class="line">             if (num % 100_0000 == 0) &#123;</div><div class="line">                 sh = wb.createSheet(&quot;sheet &quot; + num);</div><div class="line">                 rowNum = 0;</div><div class="line">             &#125;</div><div class="line">             rowNum++;</div><div class="line">             Row row = sh.createRow(rowNum);</div><div class="line">             for (int cellnum = 0; cellnum &lt; NUM_OF_COLUMNS; cellnum++) &#123;</div><div class="line">                 Cell cell = row.createCell(cellnum);</div><div class="line">                 cell.setCellValue(Math.random());</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         FileOutputStream out = new FileOutputStream(&quot;ooxml-scatter-chart_SXSSFW_&quot; + rowsNum + &quot;.xlsx&quot;);</div><div class="line">         wb.write(out);</div><div class="line">         out.close();</div><div class="line">     &#125; catch (Exception ex) &#123;</div><div class="line">         ex.printStackTrace();</div><div class="line">     &#125; finally &#123;</div><div class="line">         if (wb != null) &#123;</div><div class="line">             wb.dispose();// 删除临时文件，很重要，否则磁盘可能会被写满</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     long endTime = System.currentTimeMillis();</div><div class="line">     System.out.println(&quot;process &quot; + rowsNum + &quot; spent time:&quot; + (endTime - startTime));</div><div class="line"> &#125; catch (Exception e) &#123;</div><div class="line">     e.printStackTrace();</div><div class="line">     throw e;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;通过 POI的SXSSFWorkbook，使用操作系统的临时文件来作为缓存，可以生成超大的excel 文件（我自己测试到500W,就没往下测
    
    </summary>
    
      <category term="小功能" scheme="http://showstone.net/categories/%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    
    
      <category term="下载" scheme="http://showstone.net/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="导出" scheme="http://showstone.net/tags/%E5%AF%BC%E5%87%BA/"/>
    
      <category term="超大excel" scheme="http://showstone.net/tags/%E8%B6%85%E5%A4%A7excel/"/>
    
  </entry>
  
  <entry>
    <title> 克制</title>
    <link href="http://showstone.net/java/2017/07/23/%E4%B8%89%E7%93%9C%E4%B8%A4%E7%88%AA-2017-07-23-%E5%85%8B%E5%88%B6/"/>
    <id>http://showstone.net/java/2017/07/23/三瓜两爪-2017-07-23-克制/</id>
    <published>2017-07-23T06:32:30.000Z</published>
    <updated>2017-07-23T06:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>每天都会接触到很多的事物，如新游戏、好电影、很火的小说，抑或是新的流行语言、有趣的发现等，这些东西是如此有趣，以至于每件事都想尝试一下。然而一个残酷的现实就是我们根本没有这么多的时间和精力去处理这么多的信息，也做不好那么多感兴趣的事情。我们的精力是如此有限，如果不注意保护，等精力被耗尽之后,工作的就不是大脑,而是肌肉了.</p>
<p>慢慢发现，碎片化的时间配碎片化的事情会更合适一些，比如地铁上刷RSS和微博，等到电脑前就专心做需要一整块时间的事。RSS和知乎这类流媒体有一个很大的特点，就是信息流基本上是无限的，只要你愿意，可以一直往下刷，而时间也在不知不觉中耗尽。如果是在碎片化的时间做这类事情，就不会发生这种事情，因为会被自然打断：要下车了。</p>
<p>人接受新事物是需要耗费能量的，如果在碎片化的事情上花费太多的精力，会反过来抵制我们做核心工作的能力。但是碎片化的消息本身是无法避免的，所以需要一套机制，能让我们在接受碎片化信息的同时，不耗费过多的精力和时间。实践下来，做一个筛选会提高很多的效率：<br>    快速过滤，选出重点-&gt;细读资料后作整理、分类</p>
<p>在整理时，会发现有趣的、需要知道的、想知道的东西太多，然而精力非常有限，所以我们需要保持克制，合适的时候，要能丢掉一部分资料，也丢掉一部分兴趣。对于自己的欲望，始终保持克制</p>
<p>克制是一种美德</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每天都会接触到很多的事物，如新游戏、好电影、很火的小说，抑或是新的流行语言、有趣的发现等，这些东西是如此有趣，以至于每件事都想尝试一下。然而一个残酷的现实就是我们根本没有这么多的时间和精力去处理这么多的信息，也做不好那么多感兴趣的事情。我们的精力是如此有限，如果不注意保护，
    
    </summary>
    
      <category term="Java" scheme="http://showstone.net/categories/java/"/>
    
    
      <category term="克制" scheme="http://showstone.net/tags/%E5%85%8B%E5%88%B6/"/>
    
      <category term="精力管理" scheme="http://showstone.net/tags/%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86/"/>
    
      <category term="时间管理" scheme="http://showstone.net/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList浅析</title>
    <link href="http://showstone.net/java%E5%AE%B9%E5%99%A8/2017/03/07/java%E5%AE%B9%E5%99%A8-2015-06-24-arraylist/"/>
    <id>http://showstone.net/java容器/2017/03/07/java容器-2015-06-24-arraylist/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>#ArrayList浅析</p>
<ul>
<li>ArrayList的作用、特点</li>
<li>ArrayList的数据结构</li>
<li>ArrayList的常用方法及实现</li>
<li>ArrayList里需要注意的地方</li>
</ul>
<p>###ArrayList的作用、特点<br>ArrayList实现了List接口，常用操作有add,remove,get,size。其内部的数据采用数组进行存储。因此随机读写的速度很快，但删除、添加等操作相对会消耗比较多的时间，因为会有相关的一系列节点移动。</p>
<p>###ArrayList的数据结构<br>ArrayList内部以数组的形式存储数据。默认的是一个空数组，当添加数据后，会扩充为一个长度为10的数组。</p>
<pre><code>默认的空数组
/**
 * Constructs an empty list with an initial capacity of ten.
 */
public ArrayList() {
    super();
    this.elementData = EMPTY_ELEMENTDATA;
}

private static final Object[] EMPTY_ELEMENTDATA = {};
</code></pre><p>###ArrayList的常用方法及其实现<br>1.add()</p>
<p>加入元素之前，先确保有足够的空间</p>
<pre><code>public boolean add(E e) {&lt;br/&gt;
    ensureCapacityInternal(size + 1);  // Increments modCount!!
    elementData[size++] = e;
    return true;
}
</code></pre><p>指定位置加入元素时，之后所有的元素都需要后移</p>
<pre><code>public void add(int index, E element) {
    rangeCheckForAdd(index);

    ensureCapacityInternal(size + 1);  // Increments modCount!!
    System.arraycopy(elementData, index, elementData, index + 1, size - index);
    elementData[index] = element;
    size++;
}
</code></pre><h4 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h4><pre><code>public boolean addAll(Collection&lt;? extends E&gt; c) {
    Object[] a = c.toArray();
    int numNew = a.length;
    ensureCapacityInternal(size + numNew);  // Increments modCount
    System.arraycopy(a, 0, elementData, size, numNew);
    size += numNew;
    return numNew != 0;
}
</code></pre><p>2.remove</p>
<p>删除之前，先检查是否越界,同时也有大量的元素移动操作</p>
<pre><code>public E remove(int index) {
    rangeCheck(index);//简单地检查下标是否越界

    modCount++;
    E oldValue = elementData(index);

    int numMoved = size - index - 1;
    if (numMoved &gt; 0)
        System.arraycopy(elementData, index+1, elementData, index,
                         numMoved);
    elementData[--size] = null; // clear to let GC do its work

    return oldValue;
}
</code></pre><p>3.contain</p>
<pre><code>public boolean contains(Object o) {
    return indexOf(o) &gt;= 0;
}

public int indexOf(Object o) {
    if (o == null) {
        for (int i = 0; i &lt; size; i++)
            if (elementData[i]==null)
                return i;
    } else {
        for (int i = 0; i &lt; size; i++)
            if (o.equals(elementData[i]))
                return i;
    }
    return -1;
}
</code></pre><p>4.clone</p>
<pre><code>public Object clone() {
    try {
        @SuppressWarnings(&quot;unchecked&quot;)
            ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) super.clone();
        v.elementData = Arrays.copyOf(elementData, size);
        v.modCount = 0;
        return v;
    } catch (CloneNotSupportedException e) {
        // this shouldn&apos;t happen, since we are Cloneable
        throw new InternalError();
    }
}
</code></pre><p>5.iterator</p>
<p>通过使用cursor和lastRet来进行标记</p>
<pre><code>private class Itr implements Iterator&lt;E&gt; {
    int cursor;       // index of next element to return
    int lastRet = -1; // index of last element returned; -1 if no such
    int expectedModCount = modCount;
    ...
}
</code></pre><p>###ArrayList里需要注意的地方</p>
<ul>
<li>sublist并没有创建一个新的ArrayList,只是加了一个下标的起点</li>
</ul>
<p>代码：</p>
<pre><code>public List&lt;E&gt; subList(int fromIndex, int toIndex) {
    subListRangeCheck(fromIndex, toIndex, size);
    return new SubList(this, 0, fromIndex, toIndex);
}

 private class SubList extends AbstractList&lt;E&gt; implements RandomAccess {
    private final AbstractList&lt;E&gt; parent;
    private final int parentOffset;
    private final int offset;
    int size;
    ...
}
</code></pre><p>所以在原来的List或者Sublist里的操作，都会影响到另一个list</p>
<ul>
<li>因为ArrayList是基于数组的，所以当添加的元素超过原来的数组大小时，它需要先创建一个新的数组，并把原来的元素复制过去。这在一定程序上会影响程序的性能。类似的操作有删除，根据上面的实现代码可以知道，每删除一个元素就会对它后面的元素进行移动。可以把那些需要删除的参数用一个list保存下来，然后用removeAll来一次全部删除。</li>
</ul>
<p>代码</p>
<pre><code>public boolean removeAll(Collection&lt;?&gt; c) {
    return batchRemove(c, false);
}

private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) {
    final Object[] elementData = this.elementData;
    int r = 0, w = 0;
    boolean modified = false;
    try {
        for (; r &lt; size; r++)
            if (c.contains(elementData[r]) == complement)//这是一个比较巧妙的实现，值得学习
                elementData[w++] = elementData[r];
    } finally {
        // Preserve behavioral compatibility with AbstractCollection,
        // even if c.contains() throws.
        if (r != size) {
            System.arraycopy(elementData, r,
                             elementData, w,
                             size - r);
            w += size - r;
        }
        if (w != size) {
            // clear to let GC do its work
            for (int i = w; i &lt; size; i++)
                elementData[i] = null;
            modCount += size - w;
            size = w;
            modified = true;
        }
    }
    return modified;
}
</code></pre><ul>
<li>ArrayList里只定义了size和elementData两个元素,其他的都来自于父类AbstractList</li>
</ul>
<blockquote>
<p>protected transient int modCount = 0;</p>
<p>private int size;</p>
</blockquote>
<h3 id="以下是测试指定容器大小和让容器自动扩张比较的代码"><a href="#以下是测试指定容器大小和让容器自动扩张比较的代码" class="headerlink" title="以下是测试指定容器大小和让容器自动扩张比较的代码"></a>以下是测试指定容器大小和让容器自动扩张比较的代码</h3><pre><code>public static void main(String[] args) {
    long startTime = System.currentTimeMillis();
    for(int i=0;i&lt;100000;i++){
        ArrayList list = new ArrayList();
        for(int num=0;num&lt;1000;num++){
            list.add(&quot;object&quot;);
        }
    }
    System.out.println(&quot;用时:&quot;+ (System.currentTimeMillis()-startTime)+&quot;毫秒&quot;);
    startTime = System.currentTimeMillis();
    for(int i=0;i&lt;100000;i++){
        ArrayList list = new ArrayList(2000);
        for(int num=0;num&lt;1000;num++){
            list.add(&quot;object&quot;);
        }
    }
    System.out.println(&quot;用时:&quot;+ (System.currentTimeMillis()-startTime)+&quot;毫秒&quot;);
}
</code></pre><p>运行结果:</p>
<blockquote>
<p>用时:607毫秒<br>用时:415毫秒</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#ArrayList浅析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList的作用、特点&lt;/li&gt;
&lt;li&gt;ArrayList的数据结构&lt;/li&gt;
&lt;li&gt;ArrayList的常用方法及实现&lt;/li&gt;
&lt;li&gt;ArrayList里需要注意的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###
    
    </summary>
    
      <category term="java容器" scheme="http://showstone.net/categories/java%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="java" scheme="http://showstone.net/tags/java/"/>
    
      <category term="容器" scheme="http://showstone.net/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="ArrayList" scheme="http://showstone.net/tags/arraylist/"/>
    
  </entry>
  
  <entry>
    <title>rebase导致commit丢失</title>
    <link href="http://showstone.net/software/2017/03/07/software-2015-08-18-new-rebase%E5%AF%BC%E8%87%B4commit%E4%B8%A2%E5%A4%B1/"/>
    <id>http://showstone.net/software/2017/03/07/software-2015-08-18-new-rebase导致commit丢失/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2018-05-19T11:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>\工具<br>提交代码合并时,被告知有冲突,同事建议我用rebase来解决,可以保持提交历史的干净.然而我按他的建议进行操作之后,发现我的提交内容丢失了.很郁闷.以下是出错过程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mkdir rebaselost</div><div class="line">cd rebaselost</div><div class="line">git init</div><div class="line">echo &quot;init content&quot;  a</div><div class="line">git commit -m &apos;init content&apos;</div><div class="line">git checkout -b branch1</div><div class="line">echo &quot;branch1 content&quot;  a</div><div class="line">git commit -m &apos;branch1&apos;</div><div class="line">git checkout master</div><div class="line">echo &quot;new master content&quot;  a</div><div class="line">git commit -m &apos;master content&apos;</div><div class="line">echo &quot;new master content2&quot;  a</div><div class="line">git commit -m &apos;master content2&apos;</div><div class="line">git checkout branch1</div><div class="line">git rebase master</div><div class="line">git rebase --skip</div></pre></td></tr></table></figure>
<p>期望的结果是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new master content2  </div><div class="line">branch1 content</div></pre></td></tr></table></figure>
<p>实际的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new master content2</div></pre></td></tr></table></figure>
<p><em> 问题出在 rebase里的 –skip 参数,加了这个参数后,原来的提交记录会丢失. </em></p>
<p>要找回原来的提交记录,可以通过 git reflog 来查看所有的操作记录(包括被删除的commit记录),然后通过git checkout 来返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
<p>操作结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">fa0f628 HEAD@&#123;0&#125;: rebase: branch1    </div><div class="line">465b616 HEAD@&#123;1&#125;: rebase: checkout master    </div><div class="line">d0350f9 HEAD@&#123;2&#125;: checkout: moving from branch1 to d0350f9  </div><div class="line">7f50104 HEAD@&#123;3&#125;: checkout: moving from master to branch1</div><div class="line">465b616 HEAD@&#123;4&#125;: commit: new master status2  </div><div class="line">7f50104 HEAD@&#123;5&#125;: checkout: moving from d1fe9edd03c54d3b2fdfc0f7a9ea49a7459f5596 to master  </div><div class="line">d1fe9ed HEAD@&#123;6&#125;: rebase: branch1  </div><div class="line">7f50104 HEAD@&#123;7&#125;: rebase: checkout master  </div><div class="line">d0350f9 HEAD@&#123;8&#125;: checkout: moving from branch1 to d0350f9  </div><div class="line">7f50104 HEAD@&#123;9&#125;: rebase finished: returning to refs/heads/branch1  </div><div class="line">7f50104 HEAD@&#123;10&#125;: rebase: checkout master  </div><div class="line">d0350f9 HEAD@&#123;11&#125;: checkout: moving from master to branch1  </div><div class="line">7f50104 HEAD@&#123;12&#125;: commit: master content  </div><div class="line">4fe1cf4 HEAD@&#123;13&#125;: checkout: moving from branch1 to master  </div><div class="line">d0350f9 HEAD@&#123;14&#125;: commit: branch1  </div><div class="line">4fe1cf4 HEAD@&#123;15&#125;: checkout: moving from master to branch1  </div><div class="line">4fe1cf4 HEAD@&#123;16&#125;: commit (initial): init content</div></pre></td></tr></table></figure>
<p>找回提交:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout d0350f9</div></pre></td></tr></table></figure></p>
<p>要避免丢失,在冲突时编辑冲突即可</p>
]]></content>
    
    <summary type="html">
    
      rebase操作不当导致commit丢失,rebase操作不当导致提交信息丢失
    
    </summary>
    
      <category term="software" scheme="http://showstone.net/categories/software/"/>
    
    
      <category term="git" scheme="http://showstone.net/tags/git/"/>
    
      <category term="rebase" scheme="http://showstone.net/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>实用git命令</title>
    <link href="http://showstone.net/software/2017/03/07/software-2016-01-12-git%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://showstone.net/software/2017/03/07/software-2016-01-12-git实用命令/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>删除远程没有,但本地依然存在的分支: git fetch -p origin<br>还可以解决以下报错: </li>
</ul>
<blockquote>
<p> error: unable to delete ‘branch-name’: remote ref does not exist<br> error: 无法推送一些引用到 ‘git@gitserver:phplib’</p>
</blockquote>
<ul>
<li>合并多次提交记录</li>
</ul>
<blockquote>
<p> git rebase -i HEAD~2</p>
</blockquote>
<p>在合并提示里把需要的合并的提交改成squash,然后保存即可</p>
<ul>
<li>找回删除的分支</li>
</ul>
<blockquote>
<p>git checkout new_branch_name commit_id</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;删除远程没有,但本地依然存在的分支: git fetch -p origin&lt;br&gt;还可以解决以下报错: &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt; error: unable to delete ‘branch-name’: remote ref
    
    </summary>
    
      <category term="software" scheme="http://showstone.net/categories/software/"/>
    
    
      <category term="git" scheme="http://showstone.net/tags/git/"/>
    
      <category term="实用" scheme="http://showstone.net/tags/%E5%AE%9E%E7%94%A8/"/>
    
      <category term="命令" scheme="http://showstone.net/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="常用" scheme="http://showstone.net/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>HashMap浅析</title>
    <link href="http://showstone.net/java%E5%AE%B9%E5%99%A8/2017/03/07/java%E5%AE%B9%E5%99%A8-2015-07-05-hashmap/"/>
    <id>http://showstone.net/java容器/2017/03/07/java容器-2015-07-05-hashmap/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>HashMap的特点</li>
<li>HashMap的数据结构</li>
<li>HashMap的常用方法及实现</li>
</ul>
<h2 id="HashMap的特点"><a href="#HashMap的特点" class="headerlink" title="HashMap的特点"></a>HashMap的特点</h2><ul>
<li>HashMap内不存在相同的key(hashcode相等且key.equal()为true)</li>
<li>HashMap的get、put等方法的基本为1（实际上初到hashcode值相同的key数目以及capacity等的影响）</li>
<li>HashMap的遍历时间受capacity以及实际上的key/value对数目的影响</li>
</ul>
<h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>HashMap的数据保存在一个元素是链表的数组里。</p>
<p><img src="/img/hashmap_structure.png" alt="HashMap的数据结构"><br>HashMap的数据结构(图片来自<a href="http://www.cnblogs.com/chenssy/p/3521565.html" target="_blank" rel="external">树上月</a>)   </p>
<h2 id="HashMap的常用方法及实现"><a href="#HashMap的常用方法及实现" class="headerlink" title="HashMap的常用方法及实现"></a>HashMap的常用方法及实现</h2><p>HashMap里有以下几个参数比较重要</p>
<pre><code>transient Node&lt;K,V&gt;[] table; //实际保存数据节点的位置
transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;
transient int size; //key/map节点的数目
transient int modCount;//修改map结构的次数,如put,remove等操作
int threshold;//节点的大小
final float loadFactor;//负载因子，当size大于 thre
</code></pre><p>内部的数据结构:</p>
<pre><code>static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {
    final int hash;
    final K key;
    V value;
    Node&lt;K,V&gt; next;

    Node(int hash, K key, V value, Node&lt;K,V&gt; next) {
        this.hash = hash;
        this.key = key;
        this.value = value;
        this.next = next;
    }

    public final K getKey()        { return key; }
    public final V getValue()      { return value; }
    public final String toString() { return key + &quot;=&quot; + value; }

    public final int hashCode() {
        return Objects.hashCode(key) ^ Objects.hashCode(value);
    }

    public final V setValue(V newValue) {
        V oldValue = value;
        value = newValue;
        return oldValue;
    }

    public final boolean equals(Object o) {
        if (o == this)
            return true;
        if (o instanceof Map.Entry) {
            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;
            if (Objects.equals(key, e.getKey()) &amp;&amp;
                Objects.equals(value, e.getValue()))
                return true;
        }
        return false;
    }
}
</code></pre><ol>
<li><p>putVal()</p>
<pre><code>/**
 * Implements Map.put and related methods
 *
 * @param hash hash for key
 * @param key the key
 * @param value the value to put
 * @param onlyIfAbsent if true, don&apos;t change existing value
 * @param evict if false, the table is in creation mode.
 * @return previous value, or null if none
 */
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
               boolean evict) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
    if ((tab = table) == null || (n = tab.length) == 0)//第一次添加元素
        n = (tab = resize()).length;
    // 通过(n-1) &amp; hash来给获取元素应该放在那一个链表中,这里是一个很好的设计
    if ((p = tab[i = (n - 1) &amp; hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    else {
        Node&lt;K,V&gt; e; K k;
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            e = p;
        else if (p instanceof TreeNode)
            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
        else {
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    //当链表下的元素过多(&gt;8)时，会把链表变成红黑树,以优化查询效率
                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    break;
                p = e;
            }
        }
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    ++modCount;
    if (++size &gt; threshold)
        resize();
    afterNodeInsertion(evict);
    return null;
}
</code></pre></li>
</ol>
<pre><code>&lt;b&gt;(n - 1) &amp; hash 来计算应该放置的节点&lt;/b&gt;   
  首先，通过n一般是2的m次方，如8,16,32之类的，这时n-1后的值会是类似于 0..111 的值，通过求模，即可算出其应该于的位置。而且效率很高


&lt;b&gt;treeifyBin(tab, hash)&lt;/b&gt;   
  Java8针对链表中节点过多的情况进行了优化：当节点的数目大于等于 TREEIFY_THRESHOLD(8)时，会把链表换成树。当节点的数目小于UNTREEIFY_THRESHOLD(6)时，又会变回成链表。其中，链表到树会在put等添加节点时触发，而从树到链表只会在调用resize()时检查.
</code></pre><ol>
<li><p>remove()</p>
<pre><code>final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,
                           boolean matchValue, boolean movable) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (p = tab[index = (n - 1) &amp; hash]) != null) {
        Node&lt;K,V&gt; node = null, e; K k; V v;
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            node = p;
        else if ((e = p.next) != null) {
            if (p instanceof TreeNode)
                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);
            else {
                do {
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key ||
                         (key != null &amp;&amp; key.equals(k)))) {
                        node = e;
                        break;
                    }
                    p = e;
                } while ((e = e.next) != null);
            }
        }
        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||
                             (value != null &amp;&amp; value.equals(v)))) {
            if (node instanceof TreeNode)
                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);
            else if (node == p)
                tab[index] = node.next;
            else
                p.next = node.next;
            ++modCount;
            --size;
            afterNodeRemoval(node);
            return node;
        }
    }
    return null;
}
</code></pre></li>
<li><p>get</p>
<pre><code>final Node&lt;K,V&gt; getNode(int hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (first = tab[(n - 1) &amp; hash]) != null) {
        if (first.hash == hash &amp;&amp; // always check first node
            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
            return first;
        if ((e = first.next) != null) {
            if (first instanceof TreeNode)
                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            do {
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
</code></pre></li>
<li><p>resize</p>
<pre><code>final Node&lt;K,V&gt;[] resize() {
    Node&lt;K,V&gt;[] oldTab = table;
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    int newCap, newThr = 0;
    if (oldCap &gt; 0) {
        if (oldCap &gt;= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;
                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)
            newThr = oldThr &lt;&lt; 1; // double threshold
    }
    else if (oldThr &gt; 0) // initial capacity was placed in threshold
        newCap = oldThr;
    else {               // zero initial threshold signifies using defaults
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];
    table = newTab;
    if (oldTab != null) {
        for (int j = 0; j &lt; oldCap; ++j) {
            Node&lt;K,V&gt; e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash &amp; (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node&lt;K,V&gt; loHead = null, loTail = null;
                    Node&lt;K,V&gt; hiHead = null, hiTail = null;
                    Node&lt;K,V&gt; next;
                    do {
                        next = e.next;
                        if ((e.hash &amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}
</code></pre></li>
</ol>
<h2 id="相对以前的东西来说，HashMap太过复杂，还有以下内容需要细化"><a href="#相对以前的东西来说，HashMap太过复杂，还有以下内容需要细化" class="headerlink" title="相对以前的东西来说，HashMap太过复杂，还有以下内容需要细化"></a>相对以前的东西来说，HashMap太过复杂，还有以下内容需要细化</h2><ul>
<li><p>HashMap遍历时间为容器的初始容量加上真实的键值对</p>
<pre><code>* &lt;p&gt;This implementation provides constant-time performance for the basic
* operations (&lt;tt&gt;get&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;), assuming the hash function
* disperses the elements properly among the buckets.  Iteration over
* collection views requires time proportional to the &quot;capacity&quot; of the
* &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of buckets) plus its size (the number
* of key-value mappings).  Thus, it&apos;s very important not to set the initial
* capacity too high (or the load factor too low) if iteration performance is
* important.
</code></pre></li>
<li><p>hashcode为何要左移16位</p>
<pre><code>/**
 * Computes key.hashCode() and spreads (XORs) higher bits of hash
 * to lower.  Because the table uses power-of-two masking, sets of
 * hashes that vary only in bits above the current mask will
 * always collide. (Among known examples are sets of Float keys
 * holding consecutive whole numbers in small tables.)  So we
 * apply a transform that spreads the impact of higher bits
 * downward. There is a tradeoff between speed, utility, and
 * quality of bit-spreading. Because many common sets of hashes
 * are already reasonably distributed (so don&apos;t benefit from
 * spreading), and because we use trees to handle large sets of
 * collisions in bins, we just XOR some shifted bits in the
 * cheapest possible way to reduce systematic lossage, as well as
 * to incorporate impact of the highest bits that would otherwise
 * never be used in index calculations because of table bounds.
 */
static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}
</code></pre></li>
<li><p>大于某个数的最小2的n次方的数</p>
<pre><code>/**
 * Returns a power of two size for the given target capacity.
 */
static final int tableSizeFor(int cap) {
    int n = cap - 1;
    n |= n &gt;&gt;&gt; 1;
    n |= n &gt;&gt;&gt; 2;
    n |= n &gt;&gt;&gt; 4;
    n |= n &gt;&gt;&gt; 8;
    n |= n &gt;&gt;&gt; 16;
    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
}
</code></pre></li>
<li><p>红黑树的实现</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      简要分析了HashMap的特点、数据结构,并对源码作了简要分析
    
    </summary>
    
      <category term="Java容器" scheme="http://showstone.net/categories/java%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="java" scheme="http://showstone.net/tags/java/"/>
    
      <category term="容器" scheme="http://showstone.net/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="HashMap" scheme="http://showstone.net/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>常用linux命令</title>
    <link href="http://showstone.net/software/2017/03/07/software-2016-01-18-%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://showstone.net/software/2017/03/07/software-2016-01-18-常用linux命令/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中需要用到一些linux的命令,感于自己在这些方面的不足,所以制定了一个学习计划,在这里写上几篇博客,以作记录.</p>
<p>需要学习的软件分为以下几类:</p>
<p>系统状态查看类:</p>
<ul>
<li>top</li>
<li>htop</li>
<li>iostat</li>
<li>memstat和free</li>
<li>mpstat</li>
<li>netstat</li>
<li>nmon</li>
<li>pmap</li>
<li>ps和pstree</li>
<li>sar</li>
<li>strace</li>
<li>tcpdump</li>
<li>uptime</li>
<li>vmstat</li>
<li>wireshark</li>
<li>du</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中需要用到一些linux的命令,感于自己在这些方面的不足,所以制定了一个学习计划,在这里写上几篇博客,以作记录.&lt;/p&gt;
&lt;p&gt;需要学习的软件分为以下几类:&lt;/p&gt;
&lt;p&gt;系统状态查看类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="software" scheme="http://showstone.net/categories/software/"/>
    
    
      <category term="linux" scheme="http://showstone.net/tags/linux/"/>
    
      <category term="软件" scheme="http://showstone.net/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>top命令详解</title>
    <link href="http://showstone.net/software/2017/03/07/software-2016-03-24-new-top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://showstone.net/software/2017/03/07/software-2016-03-24-new-top命令详解/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>最近学习压测的时候,需要用到一些监控工具.发现自己对于这些工具不熟,所以在这里进行一些补充学习.</p>
<p>需要用到的工具有:<br>系统资源:top,sar,spotlight,nmon<br>网络:netstat,iostat,tcpdump,cpu,lsof,IPTraf,NetHogs,iftop<br>cpu:<br>内存:vmstat,free,<br>磁盘:iostat,iotop,  </p>
<p>下面进行正题</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>top是一个用于查看系统信息的命令,包括cpu/内存等信息,以及进程的一些信息.</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><pre><code>top    [-a | -d | -e | -c &lt;mode&gt;]
       [-F | -f]
       [-h]
       [-i &lt;interval&gt;]
       [-l &lt;samples&gt;]
       [-ncols &lt;columns&gt;]
       [-o &lt;key&gt;] [-O &lt;skey&gt;]
       [-R | -r]
       [-S]
       [-s &lt;delay&gt;]
       [-n &lt;nprocs&gt;]
       [-stats &lt;keys&gt;]
       [-pid &lt;processid&gt;]
       [-user &lt;username&gt;]
       [-U &lt;username&gt;]
       [-u]
</code></pre><p>可以在监控界面进行一些操作,如h可以查看帮助,k可以杀死进程</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;最近学习压测的时候,需要用到一些监控工具.发现自己对于这些工具不熟,所以在这里进行一些补充学习.&lt;/p&gt;
&lt;p&gt;需要用到的工具有:&lt;br&gt;系统资源:
    
    </summary>
    
      <category term="software" scheme="http://showstone.net/categories/software/"/>
    
    
      <category term="software" scheme="http://showstone.net/tags/software/"/>
    
      <category term="linux" scheme="http://showstone.net/tags/linux/"/>
    
      <category term="top" scheme="http://showstone.net/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>mybatis结构分析</title>
    <link href="http://showstone.net/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/2017/03/07/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2015-07-23-mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://showstone.net/mybatis源码分析/2017/03/07/mybatis源码分析-2015-07-23-mybatis源码分析/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2017-03-07T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>JDBC方式的几个缺点</li>
<li>MyBatis的解决方法</li>
<li><p>MyBatis的结构框架</p>
<h2 id="JDBC方式的几个缺点"><a href="#JDBC方式的几个缺点" class="headerlink" title="JDBC方式的几个缺点"></a>JDBC方式的几个缺点</h2><p>  所有用</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;JDBC方式的几个缺点&lt;/li&gt;
&lt;li&gt;MyBatis的解决方法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyBatis的结构框架&lt;/p&gt;
&lt;h2 id=&quot;JDBC方式的几个缺点&quot;&gt;&lt;a href=&quot;#JDBC方式的几个缺点&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="Mybatis源码分析" scheme="http://showstone.net/categories/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="MyBatsis" scheme="http://showstone.net/tags/mybatsis/"/>
    
      <category term="源码" scheme="http://showstone.net/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="结构" scheme="http://showstone.net/tags/%E7%BB%93%E6%9E%84/"/>
    
      <category term="设计" scheme="http://showstone.net/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>HashSet浅析</title>
    <link href="http://showstone.net/java%E5%AE%B9%E5%99%A8/2017/03/07/java%E5%AE%B9%E5%99%A8-2015-07-02-hashset%E6%B5%85%E6%9E%90/"/>
    <id>http://showstone.net/java容器/2017/03/07/java容器-2015-07-02-hashset浅析/</id>
    <published>2017-03-07T08:20:00.000Z</published>
    <updated>2018-02-13T05:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>HashSet的特点与用法</li>
<li>HashSet的数据结构</li>
<li>HashSet的常用方法及实现</li>
<li>TreeSet的简要说明</li>
</ul>
<h2 id="HashSet的特点与用法"><a href="#HashSet的特点与用法" class="headerlink" title="HashSet的特点与用法"></a>HashSet的特点与用法</h2><p>HashSet是一个没有重复元素的集合，其内部元素也没有顺序。<br>它可以放入空元素。<br>它不是线程安全的。<br>它内部是基于HashMap实现的。</p>
<p>以下摘取了一部分HashSet文档：   </p>
<pre><code>...   

* This class implements the &lt;tt&gt;Set&lt;/tt&gt; interface, backed by a hash table
* (actually a &lt;tt&gt;HashMap&lt;/tt&gt; instance).  It makes no guarantees as to the
* iteration order of the set; in particular, it does not guarantee that the
* order will remain constant over time.  This class permits the &lt;tt&gt;null&lt;/tt&gt;
* element.
*
* &lt;p&gt;This class offers constant time performance for the basic operations
* (&lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;contains&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;),
* assuming the hash function disperses the elements properly among the
* buckets.  Iterating over this set requires time proportional to the sum of
* the &lt;tt&gt;HashSet&lt;/tt&gt; instance&apos;s size (the number of elements) plus the
* &quot;capacity&quot; of the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance (the number of
* buckets).  Thus, it&apos;s very important not to set the initial capacity too
* high (or the load factor too low) if iteration performance is important.

...    
</code></pre><p>如果要遍历元素，则需要注意容器的大小，因为遍历的时间复杂度是容器的实际大小X容器的初始化大小。（测试一有代码和测试结果。）</p>
<h1 id="HashSet的数据结构"><a href="#HashSet的数据结构" class="headerlink" title="HashSet的数据结构"></a>HashSet的数据结构</h1><p>HashSet内部使用HashMap来存储数据，新加入的元素会作为key储存到set当中。value部分由一个默认的object元素来进行填充。</p>
<pre><code>private transient HashMap&lt;E,Object&gt; map;

// Dummy value to associate with an Object in the backing Map
private static final Object PRESENT = new Object();

/**
 * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has
 * default initial capacity (16) and load factor (0.75).
 */
public HashSet() {
    map = new HashMap&lt;&gt;();
}
</code></pre><h1 id="HashSet的常用方法"><a href="#HashSet的常用方法" class="headerlink" title="HashSet的常用方法"></a>HashSet的常用方法</h1><ol>
<li><p>add   </p>
<pre><code>public boolean add(E e) {
    return map.put(e, PRESENT)==null;
}
</code></pre></li>
<li><p>remove   </p>
<pre><code>public boolean remove(Object o) {
    return map.remove(o)==PRESENT;
}
</code></pre></li>
<li><p>contain</p>
<pre><code>public boolean contains(Object o) {
    return map.containsKey(o);
}
</code></pre></li>
<li><p>构造函数</p>
<p> 没什么好说的，直接上代码</p>
<pre><code>public HashSet(int initialCapacity, float loadFactor) {
    map = new HashMap&lt;&gt;(initialCapacity, loadFactor);
}
</code></pre></li>
</ol>
<h2 id="附一-元素遍历的测试"><a href="#附一-元素遍历的测试" class="headerlink" title="附一 元素遍历的测试"></a>附一 元素遍历的测试</h2><h3 id="测试1-1"><a href="#测试1-1" class="headerlink" title="测试1.1"></a>测试1.1</h3><p>首先，测试当一个集合包含1000个元素时，集合初始容量为10000和100000时的性能。</p>
<pre><code>long startTime = System.currentTimeMillis();
for(int i=0;i&lt;10000;i++){
    HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(100000);
    for(int j=0;j&lt;1000;j++){
        set.add(j+&quot;&quot;);
    }
    Iterator&lt;String&gt; ite = set.iterator();
    while(ite.hasNext()){
        ite.next();
    }
}
System.out.println(&quot;开始时间:&quot;+(System.currentTimeMillis()-startTime));
startTime = System.currentTimeMillis();
for(int i=0;i&lt;10000;i++){
    HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(1000);
    for(int j=0;j&lt;1000;j++){
        set.add(j+&quot;&quot;);
    }
    Iterator&lt;String&gt; ite = set.iterator();
    while(ite.hasNext()){
        ite.next();
    }
}
System.out.println(&quot;开始时间:&quot;+(System.currentTimeMillis()-startTime));
</code></pre><p>运行结果：</p>
<blockquote>
<p>开始时间:2647<br>开始时间:781</p>
</blockquote>
<h3 id="测试1-2"><a href="#测试1-2" class="headerlink" title="测试1.2"></a>测试1.2</h3><p>为了消除元素初始化时，不同容量大小引起的误差，去掉遍历，测试运行的时间</p>
<pre><code>long startTime = System.currentTimeMillis();
for(int i=0;i&lt;10000;i++){
    HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(100000);
    for(int j=0;j&lt;1000;j++){
        set.add(j+&quot;&quot;);
    }
    /*Iterator&lt;String&gt; ite = set.iterator();
    while(ite.hasNext()){
        ite.next();
    }*/
}
System.out.println(&quot;开始时间:&quot;+(System.currentTimeMillis()-startTime));
startTime = System.currentTimeMillis();
for(int i=0;i&lt;1000;i++){
    HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(1000);
    for(int j=0;j&lt;1000;j++){
        set.add(j+&quot;&quot;);
    }
    /*Iterator&lt;String&gt; ite = set.iterator();
    while(ite.hasNext()){
        ite.next();
    }*/
}
System.out.println(&quot;开始时间:&quot;+(System.currentTimeMillis()-startTime));
</code></pre><p>运行结果：   </p>
<blockquote>
<p>开始时间:1142<br>开始时间:795</p>
</blockquote>
<h2 id="TreeSet的简要说明"><a href="#TreeSet的简要说明" class="headerlink" title="TreeSet的简要说明"></a>TreeSet的简要说明</h2><p>TreeSet的实现除了委托的数据结构是TreeMap外，其他的操作与HashSet基本类似</p>
]]></content>
    
    <summary type="html">
    
      Set源码分析
    
    </summary>
    
      <category term="java容器" scheme="http://showstone.net/categories/java%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="java" scheme="http://showstone.net/tags/java/"/>
    
      <category term="容器" scheme="http://showstone.net/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="HashSet" scheme="http://showstone.net/tags/hashset/"/>
    
      <category term="TreeSet" scheme="http://showstone.net/tags/treeset/"/>
    
  </entry>
  
</feed>
